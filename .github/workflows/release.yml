name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version_type:
        description: "Version type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  prepare:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Update version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION=$(node scripts/version.js bump ${{ inputs.version_type }})
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            echo "tag=v${VERSION}" >> $GITHUB_OUTPUT

            # Commit version updates
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add version.json package.json
            git commit -m "Bump version to ${VERSION}"
            git tag "v${VERSION}"
            git push origin main
            git push origin "v${VERSION}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

  build:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: prepare

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare.outputs.tag }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run full test suite
        run: |
          npm run lint
          npm run type-check
          npm run test

      - name: Build for production
        run: npm run build:prod

      - name: Optimize assets
        run: |
          # Minify and optimize
          npm run optimize

      - name: Validate build
        run: node scripts/validate.js --strict

      - name: Create release assets
        run: |
          # Create main distribution
          cd dist
          zip -r "../ha-webrtc-sip-card-${{ needs.prepare.outputs.version }}.zip" .
          cd ..

          # Create individual files
          cp dist/ha-webrtc-sip-card.js "ha-webrtc-sip-card-${{ needs.prepare.outputs.version }}.js"
          cp dist/ha-webrtc-sip-card-editor.js "ha-webrtc-sip-card-editor-${{ needs.prepare.outputs.version }}.js"

          # Generate checksums
          sha256sum *.zip *.js > checksums.txt

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-assets
          path: |
            *.zip
            *.js
            checksums.txt

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [prepare, build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare.outputs.tag }}

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-assets

      - name: Generate release notes
        id: release_notes
        run: |
          # Auto-generate release notes
          NOTES=$(node scripts/generate-release-notes.js ${{ needs.prepare.outputs.version }})
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.prepare.outputs.tag }}
          name: "Release ${{ needs.prepare.outputs.version }}"
          body: ${{ steps.release_notes.outputs.notes }}
          files: |
            ha-webrtc-sip-card-${{ needs.prepare.outputs.version }}.zip
            ha-webrtc-sip-card-${{ needs.prepare.outputs.version }}.js
            ha-webrtc-sip-card-editor-${{ needs.prepare.outputs.version }}.js
            checksums.txt
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [prepare, build, release]

    steps:
      - name: Update HACS
        uses: ludeeus/action-hacs@main
        with:
          category: "integration"
          version: ${{ needs.prepare.outputs.version }}
          repository: "${{ github.repository }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
